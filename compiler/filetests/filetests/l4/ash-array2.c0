/*
(
 (kind (CompileAndRun))
)
*/


struct Array {
  int size;
  int[] elements;
};

typedef Array struct Array;

/* array operations */

Array* create(int n) {
   Array* a;
   a = alloc(Array);
   a->size = n;
   a-> elements = alloc_array(int, n);
   return a;
}

int get(int i, Array* a) {
  int * p;
  p = null;
  if(i >= 0 && i < a->size) return a->elements[i];
  else return *p;
}

int set(int i, int x, Array* a) {
  if(i >= 0 && i < a->size) a->elements[i] = x;
  return 0;
}

// test array

void run() {
  int test;
  Array* a;
  
  a = create(7);
  
  set(2, 7, a);
  set(3, 6, a);
  set(4, 5, a);
  set(5, 4, a);
  set(6, 3, a);
  set(7, 2, a);
  
  test = 1;
  test |= ((get(2, a) == 7) ? 1 : 0) << 1;
  test |= ((get(3, a) == 6) ? 1 : 0) << 2;
  test |= ((get(4, a) == 5) ? 1 : 0) << 3;
  test |= ((get(5, a) == 4) ? 1 : 0) << 4;
  test |= ((get(6, a) == 3) ? 1 : 0) << 5;
  test |= ((get(7, a) == 2) ? 1 : 0) << 6;
  
  // return test;
}

void main() {
    // TODO: we need to catch exceptions 
    // run();
}
----
