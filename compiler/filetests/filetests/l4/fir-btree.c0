/*
(
 (kind(CompileAndRun))
)
*/

extern int c0_runtime_print_int(int a);

struct twister_t {
  int index;
  int[] states;
};

typedef twister_t struct twister_t;
struct btree {
	int id;
	struct btree* left;
	struct btree* right;
};

typedef btree struct btree;

twister_t *twister_alloc(int seed)
{
  twister_t * twister;
  int[] states;
  int i;
  twister = alloc(twister_t);
  states = alloc_array(int, 624);
  twister->states = states;

  states = twister->states;
  states[0] = seed;
  for(i = 1; i <= 623; i += 1)
  {
      states[i] = (1812433253 * (states[i-1] ^ (states[i-1] >> 30 )) + i) ;
  }
  return twister;
}

int twister_gen(twister_t * twister)
{
  int i,y;
  int[] states;
  states = twister->states;
  for(i = 0; i <= 623; i += 1)
  {
    y = ((((states[i])) & (1 << (31))) != 0 ? 1 : 0) + (~(1 << (31)) & (states[(i+1) % 624]));
    states[i] = states[(i + 397) % 624] ^ (y >> 1);
    if((y % 2) == 1)
    {

      states[i] = states[i] ^ (2567483615) ;
    }
  }
  return 0;
}

int twister_rand(twister_t * twister) {
  int y;
  int unit;
  if(twister->index == 0)
  {
    unit = twister_gen(twister);
  }

  y = twister->states[twister->index];
    y ^= (y >> 11);
    y ^= (y << 7) & (2636928640) ;
    y ^= (y << 15) & (4022730752) ;
    y ^= (y >> 18);

    twister->index = (twister->index + 1) % 624;
    return y;
}

btree * btree_insert(btree * tree, int value) {
	if(tree == null) {
		tree = alloc(btree);
		tree->id = value;
		return tree;
	}
	else if(value > tree->id) {
		tree->right = btree_insert(tree->right, value);
		return tree;
	}
	else {
		tree->left = btree_insert(tree->left, value);
		return tree;
	}
}
	
twister_t *twister_new(int seed)
{
  twister_t *twister;
  int[] states;
  int i;
  twister = alloc(twister_t);
  states = alloc_array(int, 624);
  twister->states = states;

  states = twister->states;
  states[0] = seed;
  for (i = 1; i <= 623; i += 1)
  {
      states[i] = (1812433253 * (states[i-1] ^ (states[i-1] >> 30 )) + i) ;
  }
  return twister;
}

void main(){
  twister_t * random;
  btree * t;

  random = twister_new(8151337);
  t = null;

  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  t = btree_insert(t, twister_rand(random));
  
  assert(t->left->right->left->left->id ==1927951234860810022);
}
----
