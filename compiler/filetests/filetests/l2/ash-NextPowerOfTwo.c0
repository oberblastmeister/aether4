/*
(
 (kind (CompileAndRun))
 (trace)
 (emit (Abs_asm Asm))
)
*/

// Find the next highest power of two
int main() {
  int N = 3333;

  int n = N - 1;
  int bitspace = 32;

  for (int k = 1; k <= bitspace / 2; k *= 2) {
    n |= n >> k;
  }
  
  return n + 1;
}
----
(abs_x86
 ((name main)
  (blocks
   ((done@0
     ((label done@0)
      (body
       (((i (Block_params ())) (index 0) (info ([16,46]-[18,4])))
        ((i (Mov (dst (Reg lhs@0)) (src (Reg n@1)) (size Qword))) (index 1)
         (info (13:7)))
        ((i (Mov (dst (Reg rhs@2)) (src (Imm 1)) (size Qword))) (index 2)
         (info (20:14)))
        ((i
          (Bin (dst (Reg ret@3)) (op Add) (src1 (Reg lhs@0))
           (src2 (Reg rhs@2))))
         (index 3) (info (20:10-15)))
        ((i (Ret (src (Reg ret@3)) (size Qword))) (index 4) (info (20:3-15)))
        ((i Unreachable) (index 5) (info ([16,46]-[18,4])))))))
    (loop@1
     ((label loop@1)
      (body
       (((i
          (Block_params
           (((param (Temp k@4)) (ty Qword)) ((param (Temp n@1)) (ty Qword)))))
         (index 0) (info ([16,46]-[18,4])))
        ((i (Mov (dst (Reg lhs@5)) (src (Reg k@4)) (size Qword))) (index 1)
         (info (16:12)))
        ((i (Mov (dst (Reg lhs@6)) (src (Reg bitspace@7)) (size Qword)))
         (index 2) (info (14:7-15)))
        ((i (Mov (dst (Reg rhs@8)) (src (Imm 2)) (size Qword))) (index 3)
         (info (16:35)))
        ((i
          (Bin (dst (Reg rhs@9)) (op Idiv) (src1 (Reg lhs@6))
           (src2 (Reg rhs@8))))
         (index 4) (info (16:24-36)))
        ((i
          (Bin (dst (Reg cond@10)) (op Le) (src1 (Reg lhs@5))
           (src2 (Reg rhs@9))))
         (index 5) (info (16:19-36)))
        ((i
          (Cond_jump (cond (Op (Reg cond@10)))
           (b1 ((label body@2) (args ()))) (b2 ((label done@0) (args ())))))
         (index 6) (info ([16,46]-[18,4])))
        ((i Unreachable) (index 7) (info ([16,46]-[18,4])))))))
    (body@2
     ((label body@2)
      (body
       (((i (Block_params ())) (index 0) (info ([16,46]-[18,4])))
        ((i (Mov (dst (Reg lhs@11)) (src (Reg n@1)) (size Qword))) (index 1)
         (info (13:7)))
        ((i (Mov (dst (Reg lhs@12)) (src (Reg n@1)) (size Qword))) (index 2)
         (info (13:7)))
        ((i (Mov (dst (Reg rhs@13)) (src (Reg k@4)) (size Qword))) (index 3)
         (info (16:12)))
        ((i
          (Bin (dst (Reg rhs@14)) (op Rshift) (src1 (Reg lhs@12))
           (src2 (Reg rhs@13))))
         (index 4) (info (17:10-16)))
        ((i
          (Bin (dst (Reg n@15)) (op (Or Qword)) (src1 (Reg lhs@11))
           (src2 (Reg rhs@14))))
         (index 5) (info (17:5-16)))
        ((i (Mov (dst (Reg lhs@16)) (src (Reg k@4)) (size Qword))) (index 6)
         (info (16:12)))
        ((i (Mov (dst (Reg rhs@17)) (src (Imm 2)) (size Qword))) (index 7)
         (info (16:43)))
        ((i
          (Bin (dst (Reg k@18)) (op Imul) (src1 (Reg lhs@16))
           (src2 (Reg rhs@17))))
         (index 8) (info (16:38-44)))
        ((i (Jump ((label loop@1) (args ((Temp k@18) (Temp n@15))))))
         (index 9) (info ([16,46]-[18,4])))
        ((i Unreachable) (index 10) (info ([16,46]-[18,4])))))))
    (start@3
     ((label start@3)
      (body
       (((i (Block_params ())) (index 0) (info ([10,1]-[21,2])))
        ((i (Mov (dst (Reg tmp@19)) (src (Imm 3333)) (size Qword))) (index 1)
         (info (11:11-15)))
        ((i (Mov (dst (Reg N@20)) (src (Reg tmp@19)) (size Qword))) (index 2)
         (info (11:7)))
        ((i (Mov (dst (Reg lhs@21)) (src (Reg N@20)) (size Qword))) (index 3)
         (info (11:7)))
        ((i (Mov (dst (Reg rhs@22)) (src (Imm 1)) (size Qword))) (index 4)
         (info (13:15)))
        ((i
          (Bin (dst (Reg tmp@23)) (op Sub) (src1 (Reg lhs@21))
           (src2 (Reg rhs@22))))
         (index 5) (info (13:11-16)))
        ((i (Mov (dst (Reg n@24)) (src (Reg tmp@23)) (size Qword))) (index 6)
         (info (13:7)))
        ((i (Mov (dst (Reg tmp@25)) (src (Imm 32)) (size Qword))) (index 7)
         (info (14:18-20)))
        ((i (Mov (dst (Reg bitspace@7)) (src (Reg tmp@25)) (size Qword)))
         (index 8) (info (14:7-15)))
        ((i (Mov (dst (Reg tmp@26)) (src (Imm 1)) (size Qword))) (index 9)
         (info (16:16)))
        ((i (Mov (dst (Reg k@27)) (src (Reg tmp@26)) (size Qword)))
         (index 10) (info (16:12)))
        ((i (Jump ((label loop@1) (args ((Temp k@27) (Temp n@24))))))
         (index 11) (info ([16,46]-[18,4])))
        ((i Unreachable) (index 12) (info ([10,1]-[21,2])))))))))
  (start start@3) (next_temp_id 28) (next_label_id 4)
  (data ((next_stack_slot_id 0) (stack_slots ())))))
(spilled_colors ())
(spilled_color 0)
(spilled_color 1)
(spilled_color 2)
(spilled_color 3)
(spilled_color 4)
(spilled_color 5)
(spilled_color 6)
(stack_slot (slot spill0@0) (size Qword))
(stack_slot (slot spill1@1) (size Qword))
(stack_slot (slot spill2@2) (size Qword))
(stack_slot (slot spill3@3) (size Qword))
(stack_slot (slot spill4@4) (size Qword))
(stack_slot (slot spill5@5) (size Qword))
(stack_slot (slot spill6@6) (size Qword))
asm
.text
.globl _c0_main
_c0_main:
    subq $56, %rsp # prologue
.Lstart_3:
    movq $3333, %r11 # 11:11-15
    movq %r11, %rax # 11:11-15
    movq %rax, %r11 # 11:7
    movq %r11, %rax # 11:7
    movq %rax, %r11 # 11:7
    movq %r11, %rdx # 11:7
    movq $1, %r11 # 13:15
    movq %r11, %rax # 13:15
    movq %rdx, %r11 # 13:11-16
    subq %rax, %r11 # 13:11-16
    movq %r11, %rax # 13:11-16
    movq %rax, %r11 # 13:7
    movq %r11, %rdx # 13:7
    movq $32, %r11 # 14:18-20
    movq %r11, %rax # 14:18-20
    movq %rax, %r11 # 14:7-15
    movq %r11, %r9 # 14:7-15
    movq $1, %r11 # 16:16
    movq %r11, %rax # 16:16
    movq %rax, %r11 # 16:12
    movq %r11, %rax # 16:12
    movq %rax, %r11
    movq %r11, %r8
    movq %rdx, %r11
    movq %r11, %rsi
    jmp .Lloop_1 # [16,46]-[18,4]
.Lloop_1:
    movq %r8, %r11 # 16:12
    movq %r11, %rcx # 16:12
    movq %r9, %r11 # 14:7-15
    movq %r11, %rdx # 14:7-15
    movq $2, %r11 # 16:35
    movq %r11, %rax # 16:35
    movq %rax, %r11 # 16:24-36
    movq %rdx, %rax # 16:24-36
    cqo # 16:24-36
    idivq %r11 # 16:24-36
    movq %rax, %rax # 16:24-36
    cmpq %rax, %rcx # 16:19-36
    setle %al # 16:19-36
    movl %eax, %r11d # [16,46]-[18,4]
    testb %r11b, %r11b # [16,46]-[18,4]
    jne .Lbody_2 # [16,46]-[18,4]
    jmp .Ldone_0 # [16,46]-[18,4]
.Ldone_0:
    movq %rsi, %r11 # 13:7
    movq %r11, %rdx # 13:7
    movq $1, %r11 # 20:14
    movq %r11, %rax # 20:14
    movq %rdx, %r11 # 20:10-15
    addq %rax, %r11 # 20:10-15
    movq %r11, %rax # 20:10-15
    movq %rax, %rax # 20:3-15
    addq $56, %rsp # (epilogue 20:3-15)
    ret # (epilogue 20:3-15)
.Lbody_2:
    movq %rsi, %r11 # 13:7
    movq %r11, %rdi # 13:7
    movq %rsi, %r11 # 13:7
    movq %r11, %rdx # 13:7
    movq %r8, %r11 # 16:12
    movq %r11, %rax # 16:12
    movq %rdx, %r11 # 17:10-16
    movl %eax, %ecx # 17:10-16
    sarq %cl, %r11 # 17:10-16
    movq %r11, %rax # 17:10-16
    movq %rdi, %r11 # 17:5-16
    orq %rax, %r11 # 17:5-16
    movq %r11, %rcx # 17:5-16
    movq %r8, %r11 # 16:12
    movq %r11, %rdx # 16:12
    movq $2, %r11 # 16:43
    movq %r11, %rax # 16:43
    movq %rdx, %r11 # 16:38-44
    movq %rax, %rax # 16:38-44
    imulq %r11 # 16:38-44
    movq %rax, %rax # 16:38-44
    movq %rax, %r11
    movq %r11, %r8
    movq %rcx, %r11
    movq %r11, %rsi
    jmp .Lloop_1 # [16,46]-[18,4]

4096
