/*
(
 (kind (CompileAndRun))
 (emit (Tir_non_ssa))
 (trace)
)
*/

// computes the Nth prime
int main() {
  int N = 200;

  if (N <= 0) return 0;
  else if (N == 1) return 2;
  else {
    int prime = 1;
    for (int found = 1; found < N; found += 1) {
      prime += 2;
      bool break = false;
      for (int i = 3; !break && prime >= i * i; i += 2) {
        if (prime % i != 0) {
          found -= 1;
          break = true;
        }
      }
    }
    return prime;
  }
}
----
(lower_stmt
 (stmt
  (If
   (cond
    (Bin (lhs (Var (var N@0) (ty (Int)))) (op Le) (rhs (Int_const 0))
     (ty (Bool))))
   (body1 (Block ((Return (Int_const 0)))))
   (body2
    ((Block
      ((If
        (cond
         (Bin (lhs (Var (var N@0) (ty (Int)))) (op Eq) (rhs (Int_const 1))
          (ty (Bool))))
        (body1 (Block ((Return (Int_const 2)))))
        (body2
         ((Block
           ((Block
             ((Declare (ty Int) (var tmp@3))
              (Assign ((lvalue tmp@3) (expr (Int_const 1))))
              (Declare (ty Int) (var prime@2))
              (Assign ((lvalue prime@2) (expr (Var (var tmp@3) (ty (Int))))))
              (Block
               ((Declare (ty Int) (var tmp@5))
                (Assign ((lvalue tmp@5) (expr (Int_const 1))))
                (Declare (ty Int) (var found@4))
                (Assign
                 ((lvalue found@4) (expr (Var (var tmp@5) (ty (Int))))))
                (While
                 (cond
                  (Bin (lhs (Var (var found@4) (ty (Int)))) (op Lt)
                   (rhs (Var (var N@0) (ty (Int)))) (ty (Bool))))
                 (body
                  (Block
                   ((Block
                     ((Block
                       ((Assign
                         ((lvalue prime@2)
                          (expr
                           (Bin (lhs (Var (var prime@2) (ty (Int)))) 
                            (op Add) (rhs (Int_const 2)) (ty (Int))))))
                        (Declare (ty Bool) (var tmp@7))
                        (Assign ((lvalue tmp@7) (expr (Bool_const false))))
                        (Declare (ty Bool) (var break@6))
                        (Assign
                         ((lvalue break@6)
                          (expr (Var (var tmp@7) (ty (Bool))))))
                        (Block
                         ((Declare (ty Int) (var tmp@9))
                          (Assign ((lvalue tmp@9) (expr (Int_const 3))))
                          (Declare (ty Int) (var i@8))
                          (Assign
                           ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
                          (While
                           (cond
                            (Ternary
                             (cond
                              (Bin (lhs (Bool_const false)) (op Eq)
                               (rhs (Var (var break@6) (ty (Bool))))
                               (ty (Bool))))
                             (then_expr
                              (Bin (lhs (Var (var prime@2) (ty (Int))))
                               (op Ge)
                               (rhs
                                (Bin (lhs (Var (var i@8) (ty (Int))))
                                 (op Mul) (rhs (Var (var i@8) (ty (Int))))
                                 (ty (Int))))
                               (ty (Bool))))
                             (else_expr (Bool_const false)) (ty (Bool))))
                           (body
                            (Block
                             ((Block
                               ((Block
                                 ((If
                                   (cond
                                    (Bin (lhs (Bool_const false)) (op Eq)
                                     (rhs
                                      (Bin
                                       (lhs
                                        (Bin
                                         (lhs (Var (var prime@2) (ty (Int))))
                                         (op Mod)
                                         (rhs (Var (var i@8) (ty (Int))))
                                         (ty (Int))))
                                       (op Eq) (rhs (Int_const 0))
                                       (ty (Bool))))
                                     (ty (Bool))))
                                   (body1
                                    (Block
                                     ((Block
                                       ((Assign
                                         ((lvalue found@4)
                                          (expr
                                           (Bin
                                            (lhs
                                             (Var (var found@4) (ty (Int))))
                                            (op Sub) (rhs (Int_const 1))
                                            (ty (Int))))))
                                        (Assign
                                         ((lvalue break@6)
                                          (expr (Bool_const true)))))))))
                                   (body2 ()))))))
                              (Block
                               ((Assign
                                 ((lvalue i@8)
                                  (expr
                                   (Bin (lhs (Var (var i@8) (ty (Int))))
                                    (op Add) (rhs (Int_const 2)) (ty (Int))))))))))))))))))
                    (Block
                     ((Assign
                       ((lvalue found@4)
                        (expr
                         (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add)
                          (rhs (Int_const 1)) (ty (Int))))))))))))))
              (Return (Var (var prime@2) (ty (Int))))))))))))))))))
(lower_stmt (stmt (Block ((Return (Int_const 0))))))
(lower_stmt (stmt (Return (Int_const 0))))
(lower_stmt
 (stmt
  (Block
   ((If
     (cond
      (Bin (lhs (Var (var N@0) (ty (Int)))) (op Eq) (rhs (Int_const 1))
       (ty (Bool))))
     (body1 (Block ((Return (Int_const 2)))))
     (body2
      ((Block
        ((Block
          ((Declare (ty Int) (var tmp@3))
           (Assign ((lvalue tmp@3) (expr (Int_const 1))))
           (Declare (ty Int) (var prime@2))
           (Assign ((lvalue prime@2) (expr (Var (var tmp@3) (ty (Int))))))
           (Block
            ((Declare (ty Int) (var tmp@5))
             (Assign ((lvalue tmp@5) (expr (Int_const 1))))
             (Declare (ty Int) (var found@4))
             (Assign ((lvalue found@4) (expr (Var (var tmp@5) (ty (Int))))))
             (While
              (cond
               (Bin (lhs (Var (var found@4) (ty (Int)))) (op Lt)
                (rhs (Var (var N@0) (ty (Int)))) (ty (Bool))))
              (body
               (Block
                ((Block
                  ((Block
                    ((Assign
                      ((lvalue prime@2)
                       (expr
                        (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add)
                         (rhs (Int_const 2)) (ty (Int))))))
                     (Declare (ty Bool) (var tmp@7))
                     (Assign ((lvalue tmp@7) (expr (Bool_const false))))
                     (Declare (ty Bool) (var break@6))
                     (Assign
                      ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
                     (Block
                      ((Declare (ty Int) (var tmp@9))
                       (Assign ((lvalue tmp@9) (expr (Int_const 3))))
                       (Declare (ty Int) (var i@8))
                       (Assign
                        ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
                       (While
                        (cond
                         (Ternary
                          (cond
                           (Bin (lhs (Bool_const false)) (op Eq)
                            (rhs (Var (var break@6) (ty (Bool))))
                            (ty (Bool))))
                          (then_expr
                           (Bin (lhs (Var (var prime@2) (ty (Int)))) 
                            (op Ge)
                            (rhs
                             (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
                              (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                            (ty (Bool))))
                          (else_expr (Bool_const false)) (ty (Bool))))
                        (body
                         (Block
                          ((Block
                            ((Block
                              ((If
                                (cond
                                 (Bin (lhs (Bool_const false)) (op Eq)
                                  (rhs
                                   (Bin
                                    (lhs
                                     (Bin
                                      (lhs (Var (var prime@2) (ty (Int))))
                                      (op Mod)
                                      (rhs (Var (var i@8) (ty (Int))))
                                      (ty (Int))))
                                    (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                                  (ty (Bool))))
                                (body1
                                 (Block
                                  ((Block
                                    ((Assign
                                      ((lvalue found@4)
                                       (expr
                                        (Bin
                                         (lhs (Var (var found@4) (ty (Int))))
                                         (op Sub) (rhs (Int_const 1))
                                         (ty (Int))))))
                                     (Assign
                                      ((lvalue break@6)
                                       (expr (Bool_const true)))))))))
                                (body2 ()))))))
                           (Block
                            ((Assign
                              ((lvalue i@8)
                               (expr
                                (Bin (lhs (Var (var i@8) (ty (Int))))
                                 (op Add) (rhs (Int_const 2)) (ty (Int))))))))))))))))))
                 (Block
                  ((Assign
                    ((lvalue found@4)
                     (expr
                      (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add)
                       (rhs (Int_const 1)) (ty (Int))))))))))))))
           (Return (Var (var prime@2) (ty (Int)))))))))))))))
(lower_stmt
 (stmt
  (If
   (cond
    (Bin (lhs (Var (var N@0) (ty (Int)))) (op Eq) (rhs (Int_const 1))
     (ty (Bool))))
   (body1 (Block ((Return (Int_const 2)))))
   (body2
    ((Block
      ((Block
        ((Declare (ty Int) (var tmp@3))
         (Assign ((lvalue tmp@3) (expr (Int_const 1))))
         (Declare (ty Int) (var prime@2))
         (Assign ((lvalue prime@2) (expr (Var (var tmp@3) (ty (Int))))))
         (Block
          ((Declare (ty Int) (var tmp@5))
           (Assign ((lvalue tmp@5) (expr (Int_const 1))))
           (Declare (ty Int) (var found@4))
           (Assign ((lvalue found@4) (expr (Var (var tmp@5) (ty (Int))))))
           (While
            (cond
             (Bin (lhs (Var (var found@4) (ty (Int)))) (op Lt)
              (rhs (Var (var N@0) (ty (Int)))) (ty (Bool))))
            (body
             (Block
              ((Block
                ((Block
                  ((Assign
                    ((lvalue prime@2)
                     (expr
                      (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add)
                       (rhs (Int_const 2)) (ty (Int))))))
                   (Declare (ty Bool) (var tmp@7))
                   (Assign ((lvalue tmp@7) (expr (Bool_const false))))
                   (Declare (ty Bool) (var break@6))
                   (Assign
                    ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
                   (Block
                    ((Declare (ty Int) (var tmp@9))
                     (Assign ((lvalue tmp@9) (expr (Int_const 3))))
                     (Declare (ty Int) (var i@8))
                     (Assign
                      ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
                     (While
                      (cond
                       (Ternary
                        (cond
                         (Bin (lhs (Bool_const false)) (op Eq)
                          (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
                        (then_expr
                         (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
                          (rhs
                           (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
                            (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                          (ty (Bool))))
                        (else_expr (Bool_const false)) (ty (Bool))))
                      (body
                       (Block
                        ((Block
                          ((Block
                            ((If
                              (cond
                               (Bin (lhs (Bool_const false)) (op Eq)
                                (rhs
                                 (Bin
                                  (lhs
                                   (Bin (lhs (Var (var prime@2) (ty (Int))))
                                    (op Mod) (rhs (Var (var i@8) (ty (Int))))
                                    (ty (Int))))
                                  (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                                (ty (Bool))))
                              (body1
                               (Block
                                ((Block
                                  ((Assign
                                    ((lvalue found@4)
                                     (expr
                                      (Bin
                                       (lhs (Var (var found@4) (ty (Int))))
                                       (op Sub) (rhs (Int_const 1))
                                       (ty (Int))))))
                                   (Assign
                                    ((lvalue break@6)
                                     (expr (Bool_const true)))))))))
                              (body2 ()))))))
                         (Block
                          ((Assign
                            ((lvalue i@8)
                             (expr
                              (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
                               (rhs (Int_const 2)) (ty (Int))))))))))))))))))
               (Block
                ((Assign
                  ((lvalue found@4)
                   (expr
                    (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add)
                     (rhs (Int_const 1)) (ty (Int))))))))))))))
         (Return (Var (var prime@2) (ty (Int)))))))))))))
(lower_stmt (stmt (Block ((Return (Int_const 2))))))
(lower_stmt (stmt (Return (Int_const 2))))
(lower_stmt
 (stmt
  (Block
   ((Block
     ((Declare (ty Int) (var tmp@3))
      (Assign ((lvalue tmp@3) (expr (Int_const 1))))
      (Declare (ty Int) (var prime@2))
      (Assign ((lvalue prime@2) (expr (Var (var tmp@3) (ty (Int))))))
      (Block
       ((Declare (ty Int) (var tmp@5))
        (Assign ((lvalue tmp@5) (expr (Int_const 1))))
        (Declare (ty Int) (var found@4))
        (Assign ((lvalue found@4) (expr (Var (var tmp@5) (ty (Int))))))
        (While
         (cond
          (Bin (lhs (Var (var found@4) (ty (Int)))) (op Lt)
           (rhs (Var (var N@0) (ty (Int)))) (ty (Bool))))
         (body
          (Block
           ((Block
             ((Block
               ((Assign
                 ((lvalue prime@2)
                  (expr
                   (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add)
                    (rhs (Int_const 2)) (ty (Int))))))
                (Declare (ty Bool) (var tmp@7))
                (Assign ((lvalue tmp@7) (expr (Bool_const false))))
                (Declare (ty Bool) (var break@6))
                (Assign
                 ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
                (Block
                 ((Declare (ty Int) (var tmp@9))
                  (Assign ((lvalue tmp@9) (expr (Int_const 3))))
                  (Declare (ty Int) (var i@8))
                  (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
                  (While
                   (cond
                    (Ternary
                     (cond
                      (Bin (lhs (Bool_const false)) (op Eq)
                       (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
                     (then_expr
                      (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
                       (rhs
                        (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
                         (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                       (ty (Bool))))
                     (else_expr (Bool_const false)) (ty (Bool))))
                   (body
                    (Block
                     ((Block
                       ((Block
                         ((If
                           (cond
                            (Bin (lhs (Bool_const false)) (op Eq)
                             (rhs
                              (Bin
                               (lhs
                                (Bin (lhs (Var (var prime@2) (ty (Int))))
                                 (op Mod) (rhs (Var (var i@8) (ty (Int))))
                                 (ty (Int))))
                               (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                             (ty (Bool))))
                           (body1
                            (Block
                             ((Block
                               ((Assign
                                 ((lvalue found@4)
                                  (expr
                                   (Bin (lhs (Var (var found@4) (ty (Int))))
                                    (op Sub) (rhs (Int_const 1)) (ty (Int))))))
                                (Assign
                                 ((lvalue break@6) (expr (Bool_const true)))))))))
                           (body2 ()))))))
                      (Block
                       ((Assign
                         ((lvalue i@8)
                          (expr
                           (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
                            (rhs (Int_const 2)) (ty (Int))))))))))))))))))
            (Block
             ((Assign
               ((lvalue found@4)
                (expr
                 (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add)
                  (rhs (Int_const 1)) (ty (Int))))))))))))))
      (Return (Var (var prime@2) (ty (Int))))))))))
(lower_stmt
 (stmt
  (Block
   ((Declare (ty Int) (var tmp@3))
    (Assign ((lvalue tmp@3) (expr (Int_const 1))))
    (Declare (ty Int) (var prime@2))
    (Assign ((lvalue prime@2) (expr (Var (var tmp@3) (ty (Int))))))
    (Block
     ((Declare (ty Int) (var tmp@5))
      (Assign ((lvalue tmp@5) (expr (Int_const 1))))
      (Declare (ty Int) (var found@4))
      (Assign ((lvalue found@4) (expr (Var (var tmp@5) (ty (Int))))))
      (While
       (cond
        (Bin (lhs (Var (var found@4) (ty (Int)))) (op Lt)
         (rhs (Var (var N@0) (ty (Int)))) (ty (Bool))))
       (body
        (Block
         ((Block
           ((Block
             ((Assign
               ((lvalue prime@2)
                (expr
                 (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add)
                  (rhs (Int_const 2)) (ty (Int))))))
              (Declare (ty Bool) (var tmp@7))
              (Assign ((lvalue tmp@7) (expr (Bool_const false))))
              (Declare (ty Bool) (var break@6))
              (Assign
               ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
              (Block
               ((Declare (ty Int) (var tmp@9))
                (Assign ((lvalue tmp@9) (expr (Int_const 3))))
                (Declare (ty Int) (var i@8))
                (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
                (While
                 (cond
                  (Ternary
                   (cond
                    (Bin (lhs (Bool_const false)) (op Eq)
                     (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
                   (then_expr
                    (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
                     (rhs
                      (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
                       (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                     (ty (Bool))))
                   (else_expr (Bool_const false)) (ty (Bool))))
                 (body
                  (Block
                   ((Block
                     ((Block
                       ((If
                         (cond
                          (Bin (lhs (Bool_const false)) (op Eq)
                           (rhs
                            (Bin
                             (lhs
                              (Bin (lhs (Var (var prime@2) (ty (Int))))
                               (op Mod) (rhs (Var (var i@8) (ty (Int))))
                               (ty (Int))))
                             (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                           (ty (Bool))))
                         (body1
                          (Block
                           ((Block
                             ((Assign
                               ((lvalue found@4)
                                (expr
                                 (Bin (lhs (Var (var found@4) (ty (Int))))
                                  (op Sub) (rhs (Int_const 1)) (ty (Int))))))
                              (Assign
                               ((lvalue break@6) (expr (Bool_const true)))))))))
                         (body2 ()))))))
                    (Block
                     ((Assign
                       ((lvalue i@8)
                        (expr
                         (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
                          (rhs (Int_const 2)) (ty (Int))))))))))))))))))
          (Block
           ((Assign
             ((lvalue found@4)
              (expr
               (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add)
                (rhs (Int_const 1)) (ty (Int))))))))))))))
    (Return (Var (var prime@2) (ty (Int))))))))
(lower_stmt (stmt (Return (Var (var prime@2) (ty (Int))))))
(lower_stmt
 (stmt
  (Block
   ((Declare (ty Int) (var tmp@5))
    (Assign ((lvalue tmp@5) (expr (Int_const 1))))
    (Declare (ty Int) (var found@4))
    (Assign ((lvalue found@4) (expr (Var (var tmp@5) (ty (Int))))))
    (While
     (cond
      (Bin (lhs (Var (var found@4) (ty (Int)))) (op Lt)
       (rhs (Var (var N@0) (ty (Int)))) (ty (Bool))))
     (body
      (Block
       ((Block
         ((Block
           ((Assign
             ((lvalue prime@2)
              (expr
               (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add)
                (rhs (Int_const 2)) (ty (Int))))))
            (Declare (ty Bool) (var tmp@7))
            (Assign ((lvalue tmp@7) (expr (Bool_const false))))
            (Declare (ty Bool) (var break@6))
            (Assign ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
            (Block
             ((Declare (ty Int) (var tmp@9))
              (Assign ((lvalue tmp@9) (expr (Int_const 3))))
              (Declare (ty Int) (var i@8))
              (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
              (While
               (cond
                (Ternary
                 (cond
                  (Bin (lhs (Bool_const false)) (op Eq)
                   (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
                 (then_expr
                  (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
                   (rhs
                    (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
                     (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                   (ty (Bool))))
                 (else_expr (Bool_const false)) (ty (Bool))))
               (body
                (Block
                 ((Block
                   ((Block
                     ((If
                       (cond
                        (Bin (lhs (Bool_const false)) (op Eq)
                         (rhs
                          (Bin
                           (lhs
                            (Bin (lhs (Var (var prime@2) (ty (Int))))
                             (op Mod) (rhs (Var (var i@8) (ty (Int))))
                             (ty (Int))))
                           (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                         (ty (Bool))))
                       (body1
                        (Block
                         ((Block
                           ((Assign
                             ((lvalue found@4)
                              (expr
                               (Bin (lhs (Var (var found@4) (ty (Int))))
                                (op Sub) (rhs (Int_const 1)) (ty (Int))))))
                            (Assign
                             ((lvalue break@6) (expr (Bool_const true)))))))))
                       (body2 ()))))))
                  (Block
                   ((Assign
                     ((lvalue i@8)
                      (expr
                       (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
                        (rhs (Int_const 2)) (ty (Int))))))))))))))))))
        (Block
         ((Assign
           ((lvalue found@4)
            (expr
             (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add)
              (rhs (Int_const 1)) (ty (Int))))))))))))))))
(lower_stmt
 (stmt
  (While
   (cond
    (Bin (lhs (Var (var found@4) (ty (Int)))) (op Lt)
     (rhs (Var (var N@0) (ty (Int)))) (ty (Bool))))
   (body
    (Block
     ((Block
       ((Block
         ((Assign
           ((lvalue prime@2)
            (expr
             (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add)
              (rhs (Int_const 2)) (ty (Int))))))
          (Declare (ty Bool) (var tmp@7))
          (Assign ((lvalue tmp@7) (expr (Bool_const false))))
          (Declare (ty Bool) (var break@6))
          (Assign ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
          (Block
           ((Declare (ty Int) (var tmp@9))
            (Assign ((lvalue tmp@9) (expr (Int_const 3))))
            (Declare (ty Int) (var i@8))
            (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
            (While
             (cond
              (Ternary
               (cond
                (Bin (lhs (Bool_const false)) (op Eq)
                 (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
               (then_expr
                (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
                 (rhs
                  (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
                   (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                 (ty (Bool))))
               (else_expr (Bool_const false)) (ty (Bool))))
             (body
              (Block
               ((Block
                 ((Block
                   ((If
                     (cond
                      (Bin (lhs (Bool_const false)) (op Eq)
                       (rhs
                        (Bin
                         (lhs
                          (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
                           (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                         (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                       (ty (Bool))))
                     (body1
                      (Block
                       ((Block
                         ((Assign
                           ((lvalue found@4)
                            (expr
                             (Bin (lhs (Var (var found@4) (ty (Int))))
                              (op Sub) (rhs (Int_const 1)) (ty (Int))))))
                          (Assign
                           ((lvalue break@6) (expr (Bool_const true)))))))))
                     (body2 ()))))))
                (Block
                 ((Assign
                   ((lvalue i@8)
                    (expr
                     (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
                      (rhs (Int_const 2)) (ty (Int))))))))))))))))))
      (Block
       ((Assign
         ((lvalue found@4)
          (expr
           (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add)
            (rhs (Int_const 1)) (ty (Int))))))))))))))
(lower_stmt
 (stmt
  (Block
   ((Block
     ((Block
       ((Assign
         ((lvalue prime@2)
          (expr
           (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add)
            (rhs (Int_const 2)) (ty (Int))))))
        (Declare (ty Bool) (var tmp@7))
        (Assign ((lvalue tmp@7) (expr (Bool_const false))))
        (Declare (ty Bool) (var break@6))
        (Assign ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
        (Block
         ((Declare (ty Int) (var tmp@9))
          (Assign ((lvalue tmp@9) (expr (Int_const 3))))
          (Declare (ty Int) (var i@8))
          (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
          (While
           (cond
            (Ternary
             (cond
              (Bin (lhs (Bool_const false)) (op Eq)
               (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
             (then_expr
              (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
               (rhs
                (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
                 (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
               (ty (Bool))))
             (else_expr (Bool_const false)) (ty (Bool))))
           (body
            (Block
             ((Block
               ((Block
                 ((If
                   (cond
                    (Bin (lhs (Bool_const false)) (op Eq)
                     (rhs
                      (Bin
                       (lhs
                        (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
                         (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                       (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                     (ty (Bool))))
                   (body1
                    (Block
                     ((Block
                       ((Assign
                         ((lvalue found@4)
                          (expr
                           (Bin (lhs (Var (var found@4) (ty (Int)))) 
                            (op Sub) (rhs (Int_const 1)) (ty (Int))))))
                        (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
                   (body2 ()))))))
              (Block
               ((Assign
                 ((lvalue i@8)
                  (expr
                   (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
                    (rhs (Int_const 2)) (ty (Int))))))))))))))))))
    (Block
     ((Assign
       ((lvalue found@4)
        (expr
         (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add)
          (rhs (Int_const 1)) (ty (Int))))))))))))
(lower_stmt
 (stmt
  (Block
   ((Assign
     ((lvalue found@4)
      (expr
       (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add) (rhs (Int_const 1))
        (ty (Int))))))))))
(lower_stmt
 (stmt
  (Assign
   ((lvalue found@4)
    (expr
     (Bin (lhs (Var (var found@4) (ty (Int)))) (op Add) (rhs (Int_const 1))
      (ty (Int))))))))
(lower_stmt
 (stmt
  (Block
   ((Block
     ((Assign
       ((lvalue prime@2)
        (expr
         (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add)
          (rhs (Int_const 2)) (ty (Int))))))
      (Declare (ty Bool) (var tmp@7))
      (Assign ((lvalue tmp@7) (expr (Bool_const false))))
      (Declare (ty Bool) (var break@6))
      (Assign ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
      (Block
       ((Declare (ty Int) (var tmp@9))
        (Assign ((lvalue tmp@9) (expr (Int_const 3))))
        (Declare (ty Int) (var i@8))
        (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
        (While
         (cond
          (Ternary
           (cond
            (Bin (lhs (Bool_const false)) (op Eq)
             (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
           (then_expr
            (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
             (rhs
              (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
               (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
             (ty (Bool))))
           (else_expr (Bool_const false)) (ty (Bool))))
         (body
          (Block
           ((Block
             ((Block
               ((If
                 (cond
                  (Bin (lhs (Bool_const false)) (op Eq)
                   (rhs
                    (Bin
                     (lhs
                      (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
                       (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                     (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                   (ty (Bool))))
                 (body1
                  (Block
                   ((Block
                     ((Assign
                       ((lvalue found@4)
                        (expr
                         (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
                          (rhs (Int_const 1)) (ty (Int))))))
                      (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
                 (body2 ()))))))
            (Block
             ((Assign
               ((lvalue i@8)
                (expr
                 (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
                  (rhs (Int_const 2)) (ty (Int))))))))))))))))))))
(lower_stmt
 (stmt
  (Block
   ((Assign
     ((lvalue prime@2)
      (expr
       (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add) (rhs (Int_const 2))
        (ty (Int))))))
    (Declare (ty Bool) (var tmp@7))
    (Assign ((lvalue tmp@7) (expr (Bool_const false))))
    (Declare (ty Bool) (var break@6))
    (Assign ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))
    (Block
     ((Declare (ty Int) (var tmp@9))
      (Assign ((lvalue tmp@9) (expr (Int_const 3))))
      (Declare (ty Int) (var i@8))
      (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
      (While
       (cond
        (Ternary
         (cond
          (Bin (lhs (Bool_const false)) (op Eq)
           (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
         (then_expr
          (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
           (rhs
            (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
             (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
           (ty (Bool))))
         (else_expr (Bool_const false)) (ty (Bool))))
       (body
        (Block
         ((Block
           ((Block
             ((If
               (cond
                (Bin (lhs (Bool_const false)) (op Eq)
                 (rhs
                  (Bin
                   (lhs
                    (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
                     (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                   (op Eq) (rhs (Int_const 0)) (ty (Bool))))
                 (ty (Bool))))
               (body1
                (Block
                 ((Block
                   ((Assign
                     ((lvalue found@4)
                      (expr
                       (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
                        (rhs (Int_const 1)) (ty (Int))))))
                    (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
               (body2 ()))))))
          (Block
           ((Assign
             ((lvalue i@8)
              (expr
               (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
                (rhs (Int_const 2)) (ty (Int))))))))))))))))))
(lower_stmt
 (stmt
  (Block
   ((Declare (ty Int) (var tmp@9))
    (Assign ((lvalue tmp@9) (expr (Int_const 3))))
    (Declare (ty Int) (var i@8))
    (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))
    (While
     (cond
      (Ternary
       (cond
        (Bin (lhs (Bool_const false)) (op Eq)
         (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
       (then_expr
        (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
         (rhs
          (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
           (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
         (ty (Bool))))
       (else_expr (Bool_const false)) (ty (Bool))))
     (body
      (Block
       ((Block
         ((Block
           ((If
             (cond
              (Bin (lhs (Bool_const false)) (op Eq)
               (rhs
                (Bin
                 (lhs
                  (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
                   (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
                 (op Eq) (rhs (Int_const 0)) (ty (Bool))))
               (ty (Bool))))
             (body1
              (Block
               ((Block
                 ((Assign
                   ((lvalue found@4)
                    (expr
                     (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
                      (rhs (Int_const 1)) (ty (Int))))))
                  (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
             (body2 ()))))))
        (Block
         ((Assign
           ((lvalue i@8)
            (expr
             (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add)
              (rhs (Int_const 2)) (ty (Int))))))))))))))))
(lower_stmt
 (stmt
  (While
   (cond
    (Ternary
     (cond
      (Bin (lhs (Bool_const false)) (op Eq)
       (rhs (Var (var break@6) (ty (Bool)))) (ty (Bool))))
     (then_expr
      (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Ge)
       (rhs
        (Bin (lhs (Var (var i@8) (ty (Int)))) (op Mul)
         (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
       (ty (Bool))))
     (else_expr (Bool_const false)) (ty (Bool))))
   (body
    (Block
     ((Block
       ((Block
         ((If
           (cond
            (Bin (lhs (Bool_const false)) (op Eq)
             (rhs
              (Bin
               (lhs
                (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
                 (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
               (op Eq) (rhs (Int_const 0)) (ty (Bool))))
             (ty (Bool))))
           (body1
            (Block
             ((Block
               ((Assign
                 ((lvalue found@4)
                  (expr
                   (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
                    (rhs (Int_const 1)) (ty (Int))))))
                (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
           (body2 ()))))))
      (Block
       ((Assign
         ((lvalue i@8)
          (expr
           (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add) (rhs (Int_const 2))
            (ty (Int))))))))))))))
(lower_stmt
 (stmt
  (Block
   ((Block
     ((Block
       ((If
         (cond
          (Bin (lhs (Bool_const false)) (op Eq)
           (rhs
            (Bin
             (lhs
              (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
               (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
             (op Eq) (rhs (Int_const 0)) (ty (Bool))))
           (ty (Bool))))
         (body1
          (Block
           ((Block
             ((Assign
               ((lvalue found@4)
                (expr
                 (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
                  (rhs (Int_const 1)) (ty (Int))))))
              (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
         (body2 ()))))))
    (Block
     ((Assign
       ((lvalue i@8)
        (expr
         (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add) (rhs (Int_const 2))
          (ty (Int))))))))))))
(lower_stmt
 (stmt
  (Block
   ((Assign
     ((lvalue i@8)
      (expr
       (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add) (rhs (Int_const 2))
        (ty (Int))))))))))
(lower_stmt
 (stmt
  (Assign
   ((lvalue i@8)
    (expr
     (Bin (lhs (Var (var i@8) (ty (Int)))) (op Add) (rhs (Int_const 2))
      (ty (Int))))))))
(lower_stmt
 (stmt
  (Block
   ((Block
     ((If
       (cond
        (Bin (lhs (Bool_const false)) (op Eq)
         (rhs
          (Bin
           (lhs
            (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
             (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
           (op Eq) (rhs (Int_const 0)) (ty (Bool))))
         (ty (Bool))))
       (body1
        (Block
         ((Block
           ((Assign
             ((lvalue found@4)
              (expr
               (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
                (rhs (Int_const 1)) (ty (Int))))))
            (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
       (body2 ()))))))))
(lower_stmt
 (stmt
  (Block
   ((If
     (cond
      (Bin (lhs (Bool_const false)) (op Eq)
       (rhs
        (Bin
         (lhs
          (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
           (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
         (op Eq) (rhs (Int_const 0)) (ty (Bool))))
       (ty (Bool))))
     (body1
      (Block
       ((Block
         ((Assign
           ((lvalue found@4)
            (expr
             (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
              (rhs (Int_const 1)) (ty (Int))))))
          (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
     (body2 ()))))))
(lower_stmt
 (stmt
  (If
   (cond
    (Bin (lhs (Bool_const false)) (op Eq)
     (rhs
      (Bin
       (lhs
        (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Mod)
         (rhs (Var (var i@8) (ty (Int)))) (ty (Int))))
       (op Eq) (rhs (Int_const 0)) (ty (Bool))))
     (ty (Bool))))
   (body1
    (Block
     ((Block
       ((Assign
         ((lvalue found@4)
          (expr
           (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
            (rhs (Int_const 1)) (ty (Int))))))
        (Assign ((lvalue break@6) (expr (Bool_const true)))))))))
   (body2 ()))))
(lower_stmt
 (stmt
  (Block
   ((Block
     ((Assign
       ((lvalue found@4)
        (expr
         (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub)
          (rhs (Int_const 1)) (ty (Int))))))
      (Assign ((lvalue break@6) (expr (Bool_const true))))))))))
(lower_stmt
 (stmt
  (Block
   ((Assign
     ((lvalue found@4)
      (expr
       (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub) (rhs (Int_const 1))
        (ty (Int))))))
    (Assign ((lvalue break@6) (expr (Bool_const true))))))))
(lower_stmt (stmt (Assign ((lvalue break@6) (expr (Bool_const true))))))
(lower_stmt
 (stmt
  (Assign
   ((lvalue found@4)
    (expr
     (Bin (lhs (Var (var found@4) (ty (Int)))) (op Sub) (rhs (Int_const 1))
      (ty (Int))))))))
(lower_stmt
 (stmt (Assign ((lvalue i@8) (expr (Var (var tmp@9) (ty (Int))))))))
(lower_stmt (stmt (Declare (ty Int) (var i@8))))
(lower_stmt (stmt (Assign ((lvalue tmp@9) (expr (Int_const 3))))))
(lower_stmt (stmt (Declare (ty Int) (var tmp@9))))
(lower_stmt
 (stmt (Assign ((lvalue break@6) (expr (Var (var tmp@7) (ty (Bool))))))))
(lower_stmt (stmt (Declare (ty Bool) (var break@6))))
(lower_stmt (stmt (Assign ((lvalue tmp@7) (expr (Bool_const false))))))
(lower_stmt (stmt (Declare (ty Bool) (var tmp@7))))
(lower_stmt
 (stmt
  (Assign
   ((lvalue prime@2)
    (expr
     (Bin (lhs (Var (var prime@2) (ty (Int)))) (op Add) (rhs (Int_const 2))
      (ty (Int))))))))
(lower_stmt
 (stmt (Assign ((lvalue found@4) (expr (Var (var tmp@5) (ty (Int))))))))
(lower_stmt (stmt (Declare (ty Int) (var found@4))))
(lower_stmt (stmt (Assign ((lvalue tmp@5) (expr (Int_const 1))))))
(lower_stmt (stmt (Declare (ty Int) (var tmp@5))))
(lower_stmt
 (stmt (Assign ((lvalue prime@2) (expr (Var (var tmp@3) (ty (Int))))))))
(lower_stmt (stmt (Declare (ty Int) (var prime@2))))
(lower_stmt (stmt (Assign ((lvalue tmp@3) (expr (Int_const 1))))))
(lower_stmt (stmt (Declare (ty Int) (var tmp@3))))
(lower_stmt
 (stmt (Assign ((lvalue N@0) (expr (Var (var tmp@1) (ty (Int))))))))
(lower_stmt (stmt (Declare (ty Int) (var N@0))))
(lower_stmt (stmt (Assign ((lvalue tmp@1) (expr (Int_const 200))))))
(lower_stmt (stmt (Declare (ty Int) (var tmp@1))))
(tir_non_ssa
 (tir
  ((name main)
   (blocks
    ((join@0
      ((label join@0)
       (body (((i (Block_params (temps ()))) (index 0) (info ()))))))
     (then@1
      ((label then@1)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Nullary (dst ret@1) (op (Int_const 0)))) (index 1) (info ()))
         ((i (Ret (src ret@1) (ty Int))) (index 2) (info ()))))))
     (join@2
      ((label join@2)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Jump ((label join@0) (args ())))) (index 1) (info ()))))))
     (then@3
      ((label then@3)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Nullary (dst ret@3) (op (Int_const 2)))) (index 1) (info ()))
         ((i (Ret (src ret@3) (ty Int))) (index 2) (info ()))))))
     (done@4
      ((label done@4)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Unary (dst ret@4) (op (Copy Int)) (src prime@5))) (index 1)
          (info ()))
         ((i (Ret (src ret@4) (ty Int))) (index 2) (info ()))))))
     (loop@5
      ((label loop@5)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Unary (dst lhs@35) (op (Copy Int)) (src found@7))) (index 1)
          (info ()))
         ((i (Unary (dst rhs@36) (op (Copy Int)) (src N@37))) (index 2)
          (info ()))
         ((i (Bin (dst cond@6) (op Lt) (src1 lhs@35) (src2 rhs@36)))
          (index 3) (info ()))
         ((i
           (Cond_jump (cond cond@6) (b1 ((label body@15) (args ())))
            (b2 ((label done@4) (args ())))))
          (index 4) (info ()))))))
     (done@6
      ((label done@6)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Unary (dst lhs@8) (op (Copy Int)) (src found@7))) (index 1)
          (info ()))
         ((i (Nullary (dst rhs@9) (op (Int_const 1)))) (index 2) (info ()))
         ((i (Bin (dst found@7) (op Add) (src1 lhs@8) (src2 rhs@9)))
          (index 3) (info ()))
         ((i (Jump ((label loop@5) (args ())))) (index 4) (info ()))))))
     (loop@7
      ((label loop@7)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Nullary (dst lhs@29) (op (Bool_const false)))) (index 1)
          (info ()))
         ((i (Unary (dst rhs@30) (op (Copy Bool)) (src break@15))) (index 2)
          (info ()))
         ((i (Bin (dst cond@24) (op (Eq Bool)) (src1 lhs@29) (src2 rhs@30)))
          (index 3) (info ()))
         ((i
           (Cond_jump (cond cond@24) (b1 ((label then@13) (args ())))
            (b2 ((label else@14) (args ())))))
          (index 4) (info ()))))))
     (join@8
      ((label join@8)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Unary (dst lhs@12) (op (Copy Int)) (src i@11))) (index 1)
          (info ()))
         ((i (Nullary (dst rhs@13) (op (Int_const 2)))) (index 2) (info ()))
         ((i (Bin (dst i@11) (op Add) (src1 lhs@12) (src2 rhs@13))) (index 3)
          (info ()))
         ((i (Jump ((label loop@7) (args ())))) (index 4) (info ()))))))
     (then@9
      ((label then@9)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Unary (dst lhs@16) (op (Copy Int)) (src found@7))) (index 1)
          (info ()))
         ((i (Nullary (dst rhs@17) (op (Int_const 1)))) (index 2) (info ()))
         ((i (Bin (dst found@7) (op Sub) (src1 lhs@16) (src2 rhs@17)))
          (index 3) (info ()))
         ((i (Nullary (dst break@15) (op (Bool_const true)))) (index 4)
          (info ()))
         ((i (Jump ((label join@8) (args ())))) (index 5) (info ()))))))
     (else@10
      ((label else@10)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Jump ((label join@8) (args ())))) (index 1) (info ()))))))
     (body@11
      ((label body@11)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Nullary (dst lhs@18) (op (Bool_const false)))) (index 1)
          (info ()))
         ((i (Unary (dst lhs@22) (op (Copy Int)) (src prime@5))) (index 2)
          (info ()))
         ((i (Unary (dst rhs@23) (op (Copy Int)) (src i@11))) (index 3)
          (info ()))
         ((i (Bin (dst lhs@20) (op Mod) (src1 lhs@22) (src2 rhs@23)))
          (index 4) (info ()))
         ((i (Nullary (dst rhs@21) (op (Int_const 0)))) (index 5) (info ()))
         ((i (Bin (dst rhs@19) (op (Eq Int)) (src1 lhs@20) (src2 rhs@21)))
          (index 6) (info ()))
         ((i (Bin (dst cond@14) (op (Eq Bool)) (src1 lhs@18) (src2 rhs@19)))
          (index 7) (info ()))
         ((i
           (Cond_jump (cond cond@14) (b1 ((label then@9) (args ())))
            (b2 ((label else@10) (args ())))))
          (index 8) (info ()))))))
     (join@12
      ((label join@12)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i
           (Cond_jump (cond cond@10) (b1 ((label body@11) (args ())))
            (b2 ((label done@6) (args ())))))
          (index 1) (info ()))))))
     (then@13
      ((label then@13)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Unary (dst lhs@25) (op (Copy Int)) (src prime@5))) (index 1)
          (info ()))
         ((i (Unary (dst lhs@27) (op (Copy Int)) (src i@11))) (index 2)
          (info ()))
         ((i (Unary (dst rhs@28) (op (Copy Int)) (src i@11))) (index 3)
          (info ()))
         ((i (Bin (dst rhs@26) (op Mul) (src1 lhs@27) (src2 rhs@28)))
          (index 4) (info ()))
         ((i (Bin (dst cond@10) (op Ge) (src1 lhs@25) (src2 rhs@26)))
          (index 5) (info ()))
         ((i (Jump ((label join@12) (args ())))) (index 6) (info ()))))))
     (else@14
      ((label else@14)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Nullary (dst cond@10) (op (Bool_const false)))) (index 1)
          (info ()))
         ((i (Jump ((label join@12) (args ())))) (index 2) (info ()))))))
     (body@15
      ((label body@15)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Unary (dst lhs@33) (op (Copy Int)) (src prime@5))) (index 1)
          (info ()))
         ((i (Nullary (dst rhs@34) (op (Int_const 2)))) (index 2) (info ()))
         ((i (Bin (dst prime@5) (op Add) (src1 lhs@33) (src2 rhs@34)))
          (index 3) (info ()))
         ((i (Nullary (dst tmp@32) (op (Bool_const false)))) (index 4)
          (info ()))
         ((i (Unary (dst break@15) (op (Copy Bool)) (src tmp@32))) (index 5)
          (info ()))
         ((i (Nullary (dst tmp@31) (op (Int_const 3)))) (index 6) (info ()))
         ((i (Unary (dst i@11) (op (Copy Int)) (src tmp@31))) (index 7)
          (info ()))
         ((i (Jump ((label loop@7) (args ())))) (index 8) (info ()))))))
     (else@16
      ((label else@16)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Nullary (dst tmp@39) (op (Int_const 1)))) (index 1) (info ()))
         ((i (Unary (dst prime@5) (op (Copy Int)) (src tmp@39))) (index 2)
          (info ()))
         ((i (Nullary (dst tmp@38) (op (Int_const 1)))) (index 3) (info ()))
         ((i (Unary (dst found@7) (op (Copy Int)) (src tmp@38))) (index 4)
          (info ()))
         ((i (Jump ((label loop@5) (args ())))) (index 5) (info ()))))))
     (else@17
      ((label else@17)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Unary (dst lhs@40) (op (Copy Int)) (src N@37))) (index 1)
          (info ()))
         ((i (Nullary (dst rhs@41) (op (Int_const 1)))) (index 2) (info ()))
         ((i (Bin (dst cond@2) (op (Eq Int)) (src1 lhs@40) (src2 rhs@41)))
          (index 3) (info ()))
         ((i
           (Cond_jump (cond cond@2) (b1 ((label then@3) (args ())))
            (b2 ((label else@16) (args ())))))
          (index 4) (info ()))))))
     (start@18
      ((label start@18)
       (body
        (((i (Block_params (temps ()))) (index 0) (info ()))
         ((i (Nullary (dst tmp@44) (op (Int_const 200)))) (index 1)
          (info ()))
         ((i (Unary (dst N@37) (op (Copy Int)) (src tmp@44))) (index 2)
          (info ()))
         ((i (Unary (dst lhs@42) (op (Copy Int)) (src N@37))) (index 3)
          (info ()))
         ((i (Nullary (dst rhs@43) (op (Int_const 0)))) (index 4) (info ()))
         ((i (Bin (dst cond@0) (op Le) (src1 lhs@42) (src2 rhs@43)))
          (index 5) (info ()))
         ((i
           (Cond_jump (cond cond@0) (b1 ((label then@1) (args ())))
            (b2 ((label else@17) (args ())))))
          (index 6) (info ()))))))))
   (start start@18) (next_temp_id 45) (next_label_id 19))))
("Could not find jump instruction in block"
  ((label join@0)
    (body (((i (Block_params (temps ()))) (index 0) (info ()))))))
Raised at Base__Error.raise in file "src/error.ml" (inlined), line 9, characters 21-37
Called from Base__Option.value_exn in file "src/option.ml", line 119, characters 4-21
Called from Aether4__Ae_generic_ir_make.Make_ir.Block.find_control in file "compiler/src/ae_generic_ir_make.ml", lines 77-79, characters 6-87
Called from Aether4__Ae_generic_ir_make.Make_ir.Func.succ_map.(fun) in file "compiler/src/ae_generic_ir_make.ml", line 124, characters 16-36
Called from Aether4__Ae_entity_map.Make_phantom.map.(fun) in file "compiler/src/ae_entity_map.ml", line 67, characters 62-76
Called from Base__Map.Tree0.map in file "src/map.ml", line 946, characters 59-62
Called from Base__Map.Tree0.map in file "src/map.ml", line 948, characters 15-23
Called from Base__Map.Tree0.map in file "src/map.ml", line 948, characters 15-23
Called from Base__Map.Tree0.map in file "src/map.ml", line 948, characters 15-23
Called from Base__Map.Tree0.map in file "src/map.ml", line 948, characters 15-23
Called from Base__Map.Tree0.map in file "src/map.ml", line 948, characters 15-23
Called from Base__Map.Accessors.map in file "src/map.ml", line 2223, characters 36-57
Called from Aether4__Ae_generic_ir_make.Make_ir.Func.graph in file "compiler/src/ae_generic_ir_make.ml", line 143, characters 57-72
Called from Aether4__Ae_generic_ir_make.Make_ir.Func.bi_graph in file "compiler/src/ae_generic_ir_make.ml", line 144, characters 24-34
Called from Base__Option.value_or_thunk in file "src/option.ml" (inlined), line 125, characters 12-22
Called from Aether4__Ae_generic_ir_make.Make_ir.Func.compute_idoms in file "compiler/src/ae_generic_ir_make.ml", line 149, characters 8-69
Called from Aether4__Ae_tir_convert_ssa.convert in file "compiler/src/ae_tir_convert_ssa.ml", line 53, characters 14-37
Called from Aether4__Ae_driver.compile_source_to_tir.(fun) in file "compiler/src/ae_driver.ml", line 90, characters 12-39
Called from Aether4__Ae_driver.compile_source_to_asm in file "compiler/src/ae_driver.ml", line 97, characters 17-51
Called from Aether4__Ae_driver.compile_source_to_a_out in file "compiler/src/ae_driver.ml", line 148, characters 10-53
Called from Dune__exe__Filetests_runner.run_test in file "compiler/filetests/runner/filetests_runner.ml", line 61, characters 8-54

("Filetest failed" ("Could not compile test" "Compiler panicked!"))
