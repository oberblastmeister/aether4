/*
(Test (CompileAndRun (emit (Lir Abs_asm Asm))))
*/

int main() {
    int first = 1342;
    int unused = 0;
    int second = 1234;
    int third = first + second;
    bool another = true;
    bool bl = false;
    if (another) {
        first += third;
        second += 1;
    } else {
        another = bl;
        first += second;
    }
    bool final = another;
    return first + second;
}
----
((name main)
 (blocks
  ((join@0
    ((label join@0)
     (body
      (((i (Block_params (temps ()))) (index 0) (info ()))
       ((i (Unary (dst tmp@0) (op (Copy I1)) (src another@1))) (index 1)
        (info ()))
       ((i (Unary (dst final@2) (op (Copy I1)) (src tmp@0))) (index 2)
        (info ()))
       ((i (Unary (dst lhs@3) (op (Copy I64)) (src first@4))) (index 3)
        (info ()))
       ((i (Unary (dst rhs@5) (op (Copy I64)) (src second@6))) (index 4)
        (info ()))
       ((i (Bin (dst ret@7) (op Add) (src1 lhs@3) (src2 rhs@5))) (index 5)
        (info ()))
       ((i (Ret (src ret@7) (ty I64))) (index 6) (info ()))))))
   (then@1
    ((label then@1)
     (body
      (((i (Block_params (temps ()))) (index 0) (info ()))
       ((i (Unary (dst lhs@8) (op (Copy I64)) (src first@4))) (index 1)
        (info ()))
       ((i (Unary (dst rhs@9) (op (Copy I64)) (src third@10))) (index 2)
        (info ()))
       ((i (Bin (dst first@4) (op Add) (src1 lhs@8) (src2 rhs@9))) (index 3)
        (info ()))
       ((i (Unary (dst lhs@11) (op (Copy I64)) (src second@6))) (index 4)
        (info ()))
       ((i (Int_const (dst rhs@12) (const 1) (ty I1))) (index 5) (info ()))
       ((i (Bin (dst second@6) (op Add) (src1 lhs@11) (src2 rhs@12)))
        (index 6) (info ()))
       ((i (Jump ((label join@0) (args ())))) (index 7) (info ()))))))
   (else@2
    ((label else@2)
     (body
      (((i (Block_params (temps ()))) (index 0) (info ()))
       ((i (Unary (dst another@1) (op (Copy I1)) (src bl@13))) (index 1)
        (info ()))
       ((i (Unary (dst lhs@14) (op (Copy I64)) (src first@4))) (index 2)
        (info ()))
       ((i (Unary (dst rhs@15) (op (Copy I64)) (src second@6))) (index 3)
        (info ()))
       ((i (Bin (dst first@4) (op Add) (src1 lhs@14) (src2 rhs@15)))
        (index 4) (info ()))
       ((i (Jump ((label join@0) (args ())))) (index 5) (info ()))))))
   (start@3
    ((label start@3)
     (body
      (((i (Block_params (temps ()))) (index 0) (info ()))
       ((i (Block_params (temps ()))) (index 1) (info ()))
       ((i (Int_const (dst tmp@16) (const 1342) (ty I1))) (index 2)
        (info ()))
       ((i (Unary (dst first@4) (op (Copy I64)) (src tmp@16))) (index 3)
        (info ()))
       ((i (Int_const (dst tmp@17) (const 0) (ty I1))) (index 4) (info ()))
       ((i (Unary (dst unused@18) (op (Copy I64)) (src tmp@17))) (index 5)
        (info ()))
       ((i (Int_const (dst tmp@19) (const 1234) (ty I1))) (index 6)
        (info ()))
       ((i (Unary (dst second@6) (op (Copy I64)) (src tmp@19))) (index 7)
        (info ()))
       ((i (Unary (dst lhs@20) (op (Copy I64)) (src first@4))) (index 8)
        (info ()))
       ((i (Unary (dst rhs@21) (op (Copy I64)) (src second@6))) (index 9)
        (info ()))
       ((i (Bin (dst tmp@22) (op Add) (src1 lhs@20) (src2 rhs@21)))
        (index 10) (info ()))
       ((i (Unary (dst third@10) (op (Copy I64)) (src tmp@22))) (index 11)
        (info ()))
       ((i (Int_const (dst tmp@23) (const 1) (ty I64))) (index 12) (info ()))
       ((i (Unary (dst another@1) (op (Copy I1)) (src tmp@23))) (index 13)
        (info ()))
       ((i (Int_const (dst tmp@24) (const 0) (ty I64))) (index 14) (info ()))
       ((i (Unary (dst bl@13) (op (Copy I1)) (src tmp@24))) (index 15)
        (info ()))
       ((i (Unary (dst cond@25) (op (Copy I1)) (src another@1))) (index 16)
        (info ()))
       ((i
         (Cond_jump (cond cond@25) (b1 ((label then@1) (args ())))
          (b2 ((label else@2) (args ())))))
        (index 17) (info ()))))))))
 (start start@3) (next_temp_id 26) (next_label_id 4))
((name main)
 (blocks
  ((join@0
    ((label join@0)
     (body
      (((i (Block_params (temps ()))) (index 0) (info ()))
       ((i (Mov (dst (Reg tmp@0)) (src (Reg another@1)) (size Byte)))
        (index 1) (info ()))
       ((i (Mov (dst (Reg final@2)) (src (Reg tmp@0)) (size Byte))) (index 2)
        (info ()))
       ((i (Mov (dst (Reg lhs@3)) (src (Reg first@4)) (size Qword)))
        (index 3) (info ()))
       ((i (Mov (dst (Reg rhs@5)) (src (Reg second@6)) (size Qword)))
        (index 4) (info ()))
       ((i
         (Bin (dst (Reg ret@7)) (op Add) (src1 (Reg lhs@3))
          (src2 (Reg rhs@5))))
        (index 5) (info ()))
       ((i (Ret (src (Reg ret@7)) (size Qword))) (index 6) (info ()))))))
   (then@1
    ((label then@1)
     (body
      (((i (Block_params (temps ()))) (index 0) (info ()))
       ((i (Mov (dst (Reg lhs@8)) (src (Reg first@4)) (size Qword)))
        (index 1) (info ()))
       ((i (Mov (dst (Reg rhs@9)) (src (Reg third@10)) (size Qword)))
        (index 2) (info ()))
       ((i
         (Bin (dst (Reg first@4)) (op Add) (src1 (Reg lhs@8))
          (src2 (Reg rhs@9))))
        (index 3) (info ()))
       ((i (Mov (dst (Reg lhs@11)) (src (Reg second@6)) (size Qword)))
        (index 4) (info ()))
       ((i (Mov (dst (Reg rhs@12)) (src (Imm 1)) (size Qword))) (index 5)
        (info ()))
       ((i
         (Bin (dst (Reg second@6)) (op Add) (src1 (Reg lhs@11))
          (src2 (Reg rhs@12))))
        (index 6) (info ()))
       ((i (Jump ((label join@0) (args ())))) (index 7) (info ()))))))
   (else@2
    ((label else@2)
     (body
      (((i (Block_params (temps ()))) (index 0) (info ()))
       ((i (Mov (dst (Reg another@1)) (src (Reg bl@13)) (size Byte)))
        (index 1) (info ()))
       ((i (Mov (dst (Reg lhs@14)) (src (Reg first@4)) (size Qword)))
        (index 2) (info ()))
       ((i (Mov (dst (Reg rhs@15)) (src (Reg second@6)) (size Qword)))
        (index 3) (info ()))
       ((i
         (Bin (dst (Reg first@4)) (op Add) (src1 (Reg lhs@14))
          (src2 (Reg rhs@15))))
        (index 4) (info ()))
       ((i (Jump ((label join@0) (args ())))) (index 5) (info ()))))))
   (start@3
    ((label start@3)
     (body
      (((i (Block_params (temps ()))) (index 0) (info ()))
       ((i (Block_params (temps ()))) (index 1) (info ()))
       ((i (Mov (dst (Reg tmp@16)) (src (Imm 1342)) (size Qword))) (index 2)
        (info ()))
       ((i (Mov (dst (Reg first@4)) (src (Reg tmp@16)) (size Qword)))
        (index 3) (info ()))
       ((i (Mov (dst (Reg tmp@17)) (src (Imm 0)) (size Qword))) (index 4)
        (info ()))
       ((i (Mov (dst (Reg unused@18)) (src (Reg tmp@17)) (size Qword)))
        (index 5) (info ()))
       ((i (Mov (dst (Reg tmp@19)) (src (Imm 1234)) (size Qword))) (index 6)
        (info ()))
       ((i (Mov (dst (Reg second@6)) (src (Reg tmp@19)) (size Qword)))
        (index 7) (info ()))
       ((i (Mov (dst (Reg lhs@20)) (src (Reg first@4)) (size Qword)))
        (index 8) (info ()))
       ((i (Mov (dst (Reg rhs@21)) (src (Reg second@6)) (size Qword)))
        (index 9) (info ()))
       ((i
         (Bin (dst (Reg tmp@22)) (op Add) (src1 (Reg lhs@20))
          (src2 (Reg rhs@21))))
        (index 10) (info ()))
       ((i (Mov (dst (Reg third@10)) (src (Reg tmp@22)) (size Qword)))
        (index 11) (info ()))
       ((i (Mov (dst (Reg tmp@23)) (src (Imm 1)) (size Qword))) (index 12)
        (info ()))
       ((i (Mov (dst (Reg another@1)) (src (Reg tmp@23)) (size Byte)))
        (index 13) (info ()))
       ((i (Mov (dst (Reg tmp@24)) (src (Imm 0)) (size Qword))) (index 14)
        (info ()))
       ((i (Mov (dst (Reg bl@13)) (src (Reg tmp@24)) (size Byte))) (index 15)
        (info ()))
       ((i (Mov (dst (Reg cond@25)) (src (Reg another@1)) (size Byte)))
        (index 16) (info ()))
       ((i
         (Cond_jump (cond (Op (Reg cond@25))) (b1 ((label then@1) (args ())))
          (b2 ((label else@2) (args ())))))
        (index 17) (info ()))))))))
 (start start@3) (next_temp_id 26) (next_label_id 4))
.text
.globl _c0_main
_c0_main:
    pushq %rbp
    movq %rsp, %rbp
    subq $0, %rsp
.Lstart_3:
    movq $1342, %rax
    movq %rax, %r8
    movq $0, %rax
    movq %rax, %rax
    movq $1234, %rax
    movq %rax, %rcx
    movq %r8, %rdi
    movq %rcx, %rax
    movq %rdi, %r11
    addq %rax, %r11
    movq %r11, %rax
    movq %rax, %rsi
    movq $1, %rax
    movb %al, %dl
    movq $0, %rax
    movb %al, %dil
    movb %dl, %al
    movb %al, %r11b
    testb %r11b, %r11b
    jne .Lthen_1
    jmp .Lelse_2
.Lelse_2:
    movb %dil, %dl
    movq %r8, %rdi
    movq %rcx, %rax
    movq %rdi, %r11
    addq %rax, %r11
    movq %r11, %r8
    jmp .Ljoin_0
.Lthen_1:
    movq %r8, %rdi
    movq %rsi, %rax
    movq %rdi, %r11
    addq %rax, %r11
    movq %r11, %r8
    movq %rcx, %rdi
    movq $1, %rax
    movq %rdi, %r11
    addq %rax, %r11
    movq %r11, %rcx
    jmp .Ljoin_0
.Ljoin_0:
    movb %dl, %al
    movb %al, %al
    movq %r8, %rdi
    movq %rcx, %rax
    movq %rdi, %r11
    addq %rax, %r11
    movq %r11, %rax
    movq %rax, %rax
    movq %rbp, %rsp
    popq %rbp
    ret

5153
