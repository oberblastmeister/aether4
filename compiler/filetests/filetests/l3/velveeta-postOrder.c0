/*
(
 (kind (CompileAndRun))
)
*/

int nullNode(int idx){
  if(idx == 7) return 1;
  return 0;
}

int getChildren(int edges, int from){
  return (edges>>(6*from)) & 63;
}

int getChild(int children, int num){
  if(num == 1) return ((children >> 3) & 7);
  else if(num == 2) return (children & 7);
  return 7;
}

int getValue(int nodes, int idx){
  return (nodes >> (5*idx)) & 31;
}

int printInOrder(int edges, int nodes, int idx, int acc) {
  int a;
  int b;
  int _;

  if(nullNode(idx) != 0) return acc;
  acc = printInOrder(edges,nodes,getChild(getChildren(edges,idx),1),acc);
  acc = printInOrder(edges,nodes,getChild(getChildren(edges,idx),2),acc);
  acc = acc * getValue(nodes,idx) + 1;
  return acc;
}

int setValue(int nodes, int idx, int value){
  return nodes | ((value & 31) << (5*idx));
}

int setChildren(int edges, int from, int c1, int c2){
  c1 &= 7;
  c2 &= 7;

  return edges | (((c1 << 3) | c2) << (6*from));
}

void main(){
  int edges, nodes;
  edges = 0;
  nodes = 0;

  edges = setChildren(edges,0,1,2);
  edges = setChildren(edges,1,3,4);
  edges = setChildren(edges,2,5,7);
  edges = setChildren(edges,3,7,7);
  edges = setChildren(edges,4,7,7);
  edges = setChildren(edges,5,7,7);

  nodes = setValue(nodes,0,15);
  nodes = setValue(nodes,1,10);
  nodes = setValue(nodes,2,20);
  nodes = setValue(nodes,3,5);
  nodes = setValue(nodes,4,12);
  nodes = setValue(nodes,5,18);

  assert (printInOrder(edges,nodes,0,1) == 3947716);
}
----
