/*
(
 (kind (CompileAndRun (status (Signal SIGFPE))))
)
*/

bool bits_exists(int bits,int ind)
{
  return ((1 << ind) & bits) != 0;
}

int bits_is_leaf(int bits,int ind)
{
 if ((ind > 30) || (ind < 0)) return -1;
 if (bits_exists(bits,ind))
 {
  if (ind >= 15) return 1;
  else return (!(bits_exists(bits,(2 * (1 + ind) - 1)) &&
      bits_exists(bits,(2 * (1 + ind)))) ? 1 : 0);
 }
 return 0;
}
int bits_get_size(int bits,int ind)
{
 int size;
 size = 0;
 if ((ind > 30) || (ind < 0)) return -1;
 if (bits_exists(bits,ind))
 {
  if (ind >=15) return 1;
  size = bits_get_size(bits,(2 * (1 + ind) - 1));
  size += 1;
  size += bits_get_size(bits,(2 * (1 + ind)));
 }
 return size;
}

int bits_min_ind(int bits,int ind)
{
 int ret;
 if ((ind > 30) || (ind < 0)) return -1;
 if (bits_exists(bits,ind))
 {
  if (ind >=15) return ind;
  ret = bits_min_ind(bits,(2 * (1 + ind) - 1));
  if (ret < 0) return ind;
  else return ret;
 }
 return -1;

}
int bits_max_ind(int bits,int ind)
{
 int ret;
 if ((ind > 30) || (ind < 0)) return -1;
 if (bits_exists(bits,ind))
 {
  if (ind >=15) return ind;
  ret = bits_max_ind(bits,(2 * (1 + ind)));
  if (ret < 0) return ind;
  else return ret;
 }
 return -1;
}

int tree_lookup ( int bits,int n1,int n2,int n3,int n4,int n5,int n6,int n7, int n8,int n9,int n10,int n11,int n12,int n13,int n14,int n15, int n16,int n17,int n18,int n19,int n20,int n21,int n22,int n23, int n24,int n25,int n26,int n27,int n28,int n29,int n30,int n31,int index)
{
 int ret;
 ret = 0;
 if ((index > 30) || (index < 0)) return (1/0);
 if (bits_exists(bits,index))
 {
  if (index == 0) ret = n1; else if (index == 1) ret = n2; else if (index == 2) ret = n3; else if (index == 3) ret = n4; else if (index == 4) ret = n5; else if (index == 5) ret = n6; else if (index == 6) ret = n7; else if (index == 7) ret = n8; else if (index == 8) ret = n9; else if (index == 9) ret = n10; else if (index == 10) ret = n11; else if (index == 11) ret = n12; else if (index == 12) ret = n13; else if (index == 13) ret = n14; else if (index == 14) ret = n15; else if (index == 15) ret = n16; else if (index == 16) ret = n17; else if (index == 17) ret = n18; else if (index == 18) ret = n19; else if (index == 19) ret = n20; else if (index == 20) ret = n21; else if (index == 21) ret = n22; else if (index == 22) ret = n23; else if (index == 23) ret = n24; else if (index == 24) ret = n25; else if (index == 25) ret = n26; else if (index == 26) ret = n27; else if (index == 27) ret = n28; else if (index == 28) ret = n29; else if (index == 29) ret = n30; else if (index == 30) ret = n31;
  return ret;
 }
 return (1/0);
}

int tree_find ( int bits,int n1,int n2,int n3,int n4,int n5,int n6,int n7, int n8,int n9,int n10,int n11,int n12,int n13,int n14,int n15, int n16,int n17,int n18,int n19,int n20,int n21,int n22,int n23, int n24,int n25,int n26,int n27,int n28,int n29,int n30,int n31,int value,int index)
{
 int temp;
 temp = 0;
 if ((index > 30) || (index < 0)) return -2;


 if (bits_exists(bits,index))
 {
  if (index == 0) temp = n1; else if (index == 1) temp = n2; else if (index == 2) temp = n3; else if (index == 3) temp = n4; else if (index == 4) temp = n5; else if (index == 5) temp = n6; else if (index == 6) temp = n7; else if (index == 7) temp = n8; else if (index == 8) temp = n9; else if (index == 9) temp = n10; else if (index == 10) temp = n11; else if (index == 11) temp = n12; else if (index == 12) temp = n13; else if (index == 13) temp = n14; else if (index == 14) temp = n15; else if (index == 15) temp = n16; else if (index == 16) temp = n17; else if (index == 17) temp = n18; else if (index == 18) temp = n19; else if (index == 19) temp = n20; else if (index == 20) temp = n21; else if (index == 21) temp = n22; else if (index == 22) temp = n23; else if (index == 23) temp = n24; else if (index == 24) temp = n25; else if (index == 25) temp = n26; else if (index == 26) temp = n27; else if (index == 27) temp = n28; else if (index == 28) temp = n29; else if (index == 29) temp = n30; else if (index == 30) temp = n31;
  if (temp == value) return index;
  else if (temp > value) return (tree_find(bits,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,value,(2 * (1 + index) - 1)));
  else return (tree_find(bits,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,value,(2 * (1 + index))));
 }
 return -2;
}


void main ()
{
  int bits, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31;
 int ret, ind, test;
 ret = 0;
 ind = 31;
 test = 0;

  bits=(~(1<<31)); n1=16; n2=8; n3=24; n4=4; n5=12; n6=20; n7=28; n8=2; n9=6; n10=10; n11=14; n12=18; n13=22; n14=26; n15=30; n16=1; n17=3; n18=5; n19=7; n20=9; n21=11; n22=13; n23=15; n24=17; n25=19; n26=21; n27=23; n28=25; n29=27; n30=29; n31=31;

 ret = tree_lookup(bits,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,17);
 ind = tree_find(bits,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,ret,0);
 bits &= (~((1 << ind)));
 ret = tree_lookup(bits,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,ind);
}
----
